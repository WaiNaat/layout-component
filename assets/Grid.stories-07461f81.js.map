{"version":3,"file":"Grid.stories-07461f81.js","sources":["../../src/Grid/index.tsx"],"sourcesContent":["import type { CSSProperties } from 'react';\r\nimport type { PolymorphicElementPropsWithRef } from '../types';\r\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\r\nimport { grid, rowCount, columnCount, gridGap } from './Grid.css';\r\nimport { toPixelIfNumber } from '../utils/toPixelIfNumber';\r\n\r\ninterface GridProps {\r\n  rows: number | 'auto-fill' | 'auto-fit';\r\n  columns: number | 'auto-fill' | 'auto-fit';\r\n  gap?: CSSProperties['gap'];\r\n}\r\n\r\nconst Grid = <E extends React.ElementType = 'div'>(\r\n  props: PolymorphicElementPropsWithRef<E, GridProps>\r\n) => {\r\n  const {\r\n    as: Element = 'div',\r\n    gap = '',\r\n    ref,\r\n    rows,\r\n    columns,\r\n    children,\r\n    className,\r\n    style,\r\n    ...rest\r\n  } = props;\r\n  return (\r\n    <Element\r\n      ref={ref}\r\n      className={`${grid}` + (className ? ` ${className}` : '')}\r\n      style={{\r\n        ...style,\r\n        ...assignInlineVars({\r\n          [rowCount]: rows.toString(),\r\n          [columnCount]: columns.toString(),\r\n          [gridGap]: toPixelIfNumber(gap),\r\n        }),\r\n      }}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </Element>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n"],"names":["Grid","props","Element","gap","ref","rows","columns","children","className","style","rest","jsx","grid","assignInlineVars","rowCount","columnCount","gridGap","toPixelIfNumber"],"mappings":"iJAYA,MAAAA,EAAAC,GAAA,CAGE,KAAA,CAAM,GAAAC,EAAA,MACU,IAAAC,EAAA,GACR,IAAAC,EACN,KAAAC,EACA,QAAAC,EACA,SAAAC,EACA,UAAAC,EACA,MAAAC,EACA,GAAAC,CACG,EAAAT,EAEL,OAAAU,EAAA,IACET,EAAC,CAAA,IAAAE,EACC,UAAA,GAAAQ,CAAA,IAAAJ,EAAA,IAAAA,CAAA,GAAA,IACsD,MAAA,CAC/C,GAAAC,EACF,GAAAI,EAAA,CACiB,CAAAC,CAAA,EAAAT,EAAA,SAAA,EACQ,CAAAU,CAAA,EAAAT,EAAA,SAAA,EACM,CAAAU,CAAA,EAAAC,EAAAd,CAAA,CACF,CAAA,CAC/B,EACH,GAAAO,EACI,SAAAH,CAEH,CAAA,CAGP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}